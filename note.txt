By default, Next.js prerenders routes to improve performance, 
this is called Static Rendering. So if your data changes,
it won't be reflected in your dashboard.

Pada dasarnya, untuk meningkatkan performa, secara default next js itu mendukung pre-renders route yang
artinya, data akan dirender pada routenya sebelum digunakan.

Umumnya, javascript menggunakan sistem blocking sehingga code dibawahnya akan dijalankan
setelah code diatasnya berjalan, hal ini sebenarnya tidak buruk dan tentunya bisa digunakan 
pada kasus tertentu seperti kita harus memiliki id profile dan melanjutkannya untuk mengambil 
yang data-data lainnya. Tetapi disisi lain, hal ini akan mempengaruhi waktu running karena code yang
dieksekusi berjalan secara sekuensial. Maka dari itu, kita bisa menggunakan promise.all untuk 
mengatasi kasus sekuensial ini sehingga akibatnya, data yang diambil akan berjalan secara bersamaan.

Lalu, ketika data diambil secara bersamaan, jika ada satu variabel yang memiliki waktu fetching 
sangat lama, apa efeknya?

- What is Static Rendering?

Dengan rendering statis, pengambilan dan rendering data terjadi di server pada waktu 
build (saat Anda menerapkan) atau selama validasi ulang. 
Hasilnya kemudian dapat didistribusikan dan di-cache di Content Delivery Network (CDN)

Whenever a user visits your application, the cached result is served. There are a couple of benefits of static rendering:

    Faster Websites - Prerendered content can be cached and globally distributed. This ensures that users around the world can access your website's content more quickly and reliably.
    Reduced Server Load - Because the content is cached, your server does not have to dynamically generate content for each user request.
    SEO - Prerendered content is easier for search engine crawlers to index, as the content is already available when the page loads. This can lead to improved search engine rankings.

Static rendering is useful for UI with no data or data that is shared across users, such as a static blog post or a product page. It might not be a good 
fit for a dashboard that has personalized data that is regularly updated.

- What is Dynamic Rendering?

With dynamic rendering, content is rendered on the server for each user at request time (when the user visits the page).
There are a couple of benefits of dynamic rendering:


    Real-Time Data - Dynamic rendering allows your application to display real-time or frequently updated data. This is ideal for applications where data changes often.
    User-Specific Content - It's easier to serve personalized content, such as dashboards or user profiles, and update the data based on user interaction.
    Request Time Information - Dynamic rendering allows you to access information that can only be known at request time, such as cookies or the URL search parameters.


Anda dapat menggunakan API Next.js yang disebut stable_noStore di dalam Komponen Server atau fungsi pengambilan data untuk tidak ikut serta dalam rendering statis. 
Mari tambahkan ini.

Note: unstable_noStore is an experimental API and may change in the future. If you prefer to use a stable API in your own projects, 
you can also use the Segment Config Option export const dynamic = "force-dynamic".

Here, you've added an artificial 3-second delay to simulate a slow data fetch. The result is that now your whole page
 is blocked while the data is being fetched.

Dengan rendering dinamis, aplikasi Anda hanya secepat pengambilan data paling lambat.

- What is streaming data?

Dengan streaming, Anda dapat mencegah permintaan data yang lambat memblokir seluruh halaman Anda. 
Hal ini memungkinkan pengguna untuk melihat dan berinteraksi dengan bagian halaman tanpa menunggu semua data dimuat sebelum UI apa pun dapat ditampilkan kepada pengguna.
Diagram menunjukkan waktu dengan pengambilan data berurutan dan pengambilan data paralel.

Streaming works well with React's component model, as each component can be considered a chunk.

There are two ways you implement streaming in Next.js:

   -  At the page level, with the loading.tsx file.
   -  For specific components, with <Suspense>.

A few things are happening here:

    - loading.tsx is a special Next.js file built on top of Suspense, it allows you to create fallback UI to show as a replacement while page content loads.
    - Since <SideNav> is static, it's shown immediately. The user can interact with <SideNav> while the dynamic content is loading.
    The user doesn't have to wait for the page to finish loading before navigating away (this is called interruptable navigation).


Streaming component : 


